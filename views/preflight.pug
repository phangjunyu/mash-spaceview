doctype html
html
    head
        title Simple Map
        meta(charset="utf-8")
        meta(http-equiv="X-UA-Compatible", content="IE=edge")
        meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
        link(rel='stylesheet', type='text/css', href='/css/preflight.css')
        link(rel='stylesheet', href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css', integrity='sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm', crossorigin='anonymous')
        script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js')
        style.
          /* Always set the map height explicitly to define the size of the div
          * element that contains the map. */
          #map {
          height: 100%;
          }
          /* Optional: Makes the sample page fill the window. */
          html, body {
          height: 100%;
          margin: 0;
          padding: 0;
          }
    body
        .container-fluid.wrapper
            .row.map-view
                .col-3
                    .btn-group(data-toggle='buttons').list-group
                        label.btn.btn-primary#choose-start
                            input(type='radio', name='options', autocomplete='off')
                            | Choose Startpoint
                        label.btn.btn-primary#choose-end
                            input(type='radio', name='options', autocomplete='off')
                            |  Choose Endpoint
                    .coordinate-info.list-group
                        a.list-group-item.list-group-item-action.flex-column.start-point
                            .d-flex.w-100.justify-content-between
                                h5.mb-1.details-of-start-point
                                small Startpoint
                            p.mb-1.coordinates-of-start-point
                        a.list-group-item.list-group-item-action.flex-column.end-point
                            .d-flex.w-100.justify-content-between
                                h5.mb-1.details-of-end-point
                                small Endpoint
                            p.mb-1.coordinates-of-end-point
                    .launchbutton
                        #launch.button.btn.btn-outline-primary(type='button') Launch Flight Mode
                    .data-window.list-group
                        a.list-group-item.list-group-item-action.flex-column.current-location
                            .d-flex.w-100.justify-content-between
                                h5.mb-1 Latitude
                            p.mb-1.current-latitude
                        a.list-group-item.list-group-item-action.flex-column.current-location
                            .d-flex.w-100.justify-content-between
                                h5.mb-1 Longitude
                            p.mb-1.current-longitude
                        a.list-group-item.list-group-item-action.flex-column
                            .d-flex.w-100.justify-content-between
                                h5.mb-1 Altitude
                            p.mb-1.current-altitude 
                        a.list-group-item.list-group-item-action.flex-column
                            .d-flex.w-100.justify-content-between
                                h5.mb-1 Speed
                            p.mb-1.current-speed
                .col-9
                    #map 

    script.
        var launchButton = $("#launch")
        var startButton = $("#choose-start")
        var endButton = $("#choose-end")
        startButton.click(function() {
            $(this).checked=true
            endButton.checked=false;
        });
        endButton.click(function() {
            $(this).checked=true
            startButton.checked=false;
        });
        function changeMarkerPosition(marker, newloc, map){
            marker.setPosition(newloc);
            marker.set(map);
        }
        
        function initMap() {
            flightPathCoordinates = []
            var options = {
                zoom: 15,
                center: {lat: 37.876, lng: -122.258},
                mapTypeId: google.maps.MapTypeId.HYBRID
            }
            var map = new google.maps.Map(document.getElementById('map'), options);
            
            var startMarker = new google.maps.Marker({
                position: {lat: 37.876, lng: -122.258}
            });
            var endMarker = new google.maps.Marker({
                position: {lat: 37.876, lng: -122.258}
            });
            var flightPath = new google.maps.Polyline({
                  path: flightPathCoordinates,
                  geodesic: true,
                  strokeColor: '#FF0000',
                  strokeOpacity: 1.0,
                  strokeWeight: 2
                });
            flightPath.setMap(null)
            // Add a listener for the click event
            var geocoder = new google.maps.Geocoder();
            map.addListener('click', function(event){
                if ($('#choose-start').hasClass('active')){
                    latLng = event.latLng
                    startMarker.setPosition(latLng)
                    startMarker.setMap(map)
                    flightPathCoordinates[0] = latLng
                    $('.coordinates-of-start-point').text(latLng)
                    reverseGeoCode(geocoder, latLng, function(err, returned){
                        if (err) console.log("ERROR:", err)
                        else {
                            $('.details-of-start-point').text(returned)
                        }
                    });
                }
                else if ($('#choose-end').hasClass('active')){
                    latLng = event.latLng
                    endMarker.setPosition(latLng)
                    endMarker.setMap(map)
                    flightPathCoordinates[1] = latLng
                    $('.coordinates-of-end-point').text(latLng)
                    reverseGeoCode(geocoder, latLng, function(err, returned){
                        if (err) console.log("ERROR:", err)
                        else {
                            $('.details-of-end-point').text(returned)
                        }
                    });
                }
                else {
            
                }
                if(flightPathCoordinates.length > 1){
                    flightPath.setMap(null);
                    flightPath = new google.maps.Polyline({
                          path: flightPathCoordinates,
                          geodesic: true,
                          strokeColor: '#FFC0CB',
                          strokeOpacity: 1.0,
                          strokeWeight: 5
                        });
                    flightPath.setMap(map);
                }
            });

            var currentLocationMarker = new google.maps.Marker({
                position: {lat: 37.876, lng: -122.258},
                icon: {
            		url: "https://image.ibb.co/bxWeCH/icon.png",
            		scaledSize: new google.maps.Size(64, 64)
            	}
            });
            var geo_options = {
              enableHighAccuracy: true, 
              maximumAge        : 30000, 
              timeout           : 27000
            };
            var currentLocationDiv = document.createElement('div');
            var currentLocation = new showCurrentLocation(currentLocationDiv, map, currentLocationMarker, geo_options);
            var trackLocationDiv = document.createElement('div');
            var currentLocation = new trackCurrentLocation(trackLocationDiv, map, currentLocationMarker, geo_options);

            currentLocationDiv.index = 1;
            trackLocationDiv.index = 1;
            map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(trackLocationDiv);
            map.controls[google.maps.ControlPosition.RIGHT_BOTTOM].push(currentLocationDiv);
            
            launchButton.click(function() {
                addPolygon(map);
            });
        }
        
        function reverseGeoCode(geocoder, latlng, callback) {
            geocoder.geocode({
                'latLng': latlng
            }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    if (results[0]) {
                        var address = results[0].formatted_address
                        callback(null, address)
                    } else {
                        callback("No results found", null);
                    }
                } else {
                    callback("Geocoder failed due to: " + status, null);
                }
            });
        }
        
        function showCurrentLocation(controlDiv, map, currentLocationMarker, geo_options) {
            // Set CSS for the control interior.
            var controlText = document.createElement('div');
            controlText.style.color = 'rgb(25,25,25)';
            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
            controlText.style.fontSize = '16px';
            controlText.style.lineHeight = '38px';
            controlText.style.paddingLeft = '5px';
            controlText.style.paddingRight = '5px';
            controlText.innerHTML = 'Show Location';
            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = '#fff';
            controlUI.style.border = '2px solid #fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginBottom = '22px';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Find current location';
            controlDiv.appendChild(controlUI);            
            controlUI.appendChild(controlText);
            
            controlUI.addEventListener('click', function() {
                // Try HTML5 geolocation.
                var time = new Date();
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(function(position) {
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        var time = new Date();
                        currentLocationMarker.setPosition(pos);
                        currentLocationMarker.setMap(map);
                        map.panTo(pos);
                        $(".current-latitude").text(position.coords.latitude)
                        $(".current-longitude").text(position.coords.longitude)
                        var altitude = position.coords.altitude != null ? position.coords.altitude : "Not Available"
                        $(".current-altitude").text(altitude)
                        var speed = position.coords.speed != null ? position.coords.speed : "Not Available"
                        $(".current-speed").text(speed)
                    }, function() {
                        handleLocationError(true);
                    }, geo_options);
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false);
                }
            });
        }
        function handleLocationError(browserHasGeolocation) {
            alert(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation.');
        }
        
        function trackCurrentLocation(controlDiv, map, currentLocationMarker, geo_options){
            var controlUI = document.createElement('div');
            controlUI.style.backgroundColor = '#fff';
            controlUI.style.border = '2px solid #fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginBottom = '22px';
            controlUI.style.textAlign = 'center';
            controlUI.title = 'Track current location';
            var controlText = document.createElement('div');
            controlText.style.color = 'rgb(25,25,25)';
            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
            controlText.style.fontSize = '16px';
            controlText.style.lineHeight = '38px';
            controlText.style.paddingLeft = '5px';
            controlText.style.paddingRight = '5px';
            controlText.innerHTML = 'Start Tracking';
            controlDiv.appendChild(controlUI);            
            controlUI.appendChild(controlText);

            controlUI.addEventListener('click', function() {
                // Try HTML5 geolocation.
                if (navigator.geolocation) {
                    navigator.geolocation.watchPosition(function(position){
                        var pos = {
                            lat: position.coords.latitude,
                            lng: position.coords.longitude
                        };
                        currentLocationMarker.setPosition(pos)
                        $(".current-latitude").text(position.coords.latitude)
                        $(".current-longitude").text(position.coords.longitude)
                        var altitude = position.coords.altitude != null ? position.coords.altitude : "Not Available"
                        $(".current-altitude").text(altitude)
                        var speed = position.coords.speed != null ? position.coords.speed : "Not Available"
                        $(".current-speed").text(speed)
                    }, function() {
                        handleLocationError(true);
                    }, geo_options);
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false);
                }
            });
            
        }
        function addPolygon(map) {
            // Define the LatLng coordinates for the polygon's path.
            
            var firstPolygonCoords = [
                {lat: 37.878288, lng: -122.248975},
                {lat: 37.876831, lng: -122.246714},
                {lat: 37.877882, lng: -122.246458},
                {lat: 37.878829, lng: -122.247561},
                {lat: 37.878288, lng: -122.248975},
            ];
            var secondPolygonCoords = [
                {lat: 37.872313, lng: -122.263357},
                {lat: 37.873539, lng: -122.261658},
                {lat: 37.873003, lng: -122.260530},
                {lat: 37.871813, lng: -122.262571},
                {lat: 37.872313, lng: -122.263357},
            ];
            var thirdPolygonCoords = [
                {lat: 37.879111, lng: -122.256217},
                {lat: 37.879431, lng: -122.254923},
                {lat: 37.875488, lng: -122.254188},
                {lat: 37.875848, lng: -122.255849},
                {lat: 37.879111, lng: -122.256217},
            ];
            // Construct the first polygon.
            var polyOne = new google.maps.Polygon({
                paths: firstPolygonCoords,
                strokeColor: '#0033cc',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#0033cc',
                fillOpacity: 0.35
            });
            polyOne.setMap(map);
            // Construct the second polygon.
            var polyTwo = new google.maps.Polygon({
                paths: secondPolygonCoords,
                strokeColor: '#0066cc',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#0066cc',
                fillOpacity: 0.35
            });
            polyTwo.setMap(map);
            // Construct the third polygon.
            var polyThree = new google.maps.Polygon({
                paths: thirdPolygonCoords,
                strokeColor: '#0099cc',
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: '#0099cc',
                fillOpacity: 0.35
            });
            polyThree.setMap(map);
        }
    script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyAOXmvxQAzQGoCLodBuhjRJ_LanBmL-Asc&callback=initMap', async='', defer='')
    script(src='https://code.jquery.com/jquery-3.2.1.slim.min.js', integrity='sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN', crossorigin='anonymous')
    script(src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js', integrity='sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q', crossorigin='anonymous')
    script(src='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js', integrity='sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl', crossorigin='anonymous')
